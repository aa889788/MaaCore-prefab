import org.gradle.nativeplatform.platform.internal.DefaultNativePlatform

plugins {
    id  'com.android.library'
}

android {
    namespace "com.example.maacore"
    compileSdk 34
    ndkVersion '26.0.10792818'

    defaultConfig {
        minSdk 28
        targetSdk 34

        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
                arguments "-DWITH_THRIFT=ON"
            }
        }

        // Similar to other properties in the defaultConfig block,
        // you can configure the ndk block for each product flavor
        // in your build configuration.
        ndk {
            // Specifies the ABI configurations of your native
            // libraries Gradle should build and package with your app.
            //noinspection ChromeOsAbiSupport
            abiFilters 'arm64-v8a', "x86_64"
        }

        def abi_map = [
            'arm64-v8a': 'arm64',
            'x86_64': 'x64',
            'x86': 'x86',
            'armeabi-v7a': 'arm',
        ]

        for (def abi : ndk.abiFilters) {
            def triplet = abi_map[abi]
            if (triplet != null) {
                triplet = triplet + '-android'
                installMaaDeps(triplet)
            }
        }
    }

    externalNativeBuild {
        cmake {
            path "src/main/cpp/MaaAssistantArknights/CMakeLists.txt"
        }
    }

    prefab {
        MaaCore {
            headers "src/main/cpp/MaaAssistantArknights/include"
        }
    }
}

String GetHostTriplet() {
    def host_os = ''
    OperatingSystem os = DefaultNativePlatform.currentOperatingSystem;
    if (os.isWindows()) {
        host_os = 'windows'
    }
    else if (os.isLinux()) {
        host_os = 'linux'
    }
    else if (os.isMacOsX()) {
        host_os = 'osx'
    }
    else {
        throw GradleException("Unsupported host OS: " + os)
    }

    def host_arch = System.getProperty('os.arch').toLowerCase()
    if (host_arch.matches('amd64|x86_64')) {
        host_arch = 'x64'
    }
    else if (host_arch.matches('i[3-6]86')) {
        host_arch = 'x86'
    }
    else if (host_arch.matches('arm64|armv8l|aarch64')) {
        host_arch = 'arm64'
    }
    else {
        throw GradleException("Unsupported host architecture: " + host_arch)
    }
    def host_triple = host_arch + '-' + host_os
    println("Host triplet: " + host_triple)
    return host_triple
}

void DownloadMaaDeps(String triplet) {
    def python_exec = 'python'
    println("Downloading MaaDeps for " + triplet)
    exec {
        workingDir 'src/main/cpp/MaaAssistantArknights'
        commandLine python_exec, 'maadeps-download.py', triplet
        standardOutput System.out
    }
}

static boolean isMaaDepsInstalled(String triplet) {
    def maadeps = new File('app/src/main/cpp/MaaAssistantArknights/MaaDeps/vcpkg/installed/maa-' + triplet)
    return maadeps.exists()
}

void installMaaDeps(String triplet) {
    if (isMaaDepsInstalled(triplet)) {
        println("MaaDeps " + triplet + " already installed, skipping")
    }
    else {
        DownloadMaaDeps(triplet)
    }
}

tasks.register('install-host-maadeps') {
    doLast {
        def host_triplet = GetHostTriplet()
        installMaaDeps(host_triplet)
    }
}

preBuild.dependsOn tasks.named('install-host-maadeps')
